---
description: 
globs: 
alwaysApply: true
---
# Qualidade de Código

Esta regra define padrões e práticas para manter alta qualidade no código do projeto.

## Princípios Fundamentais

### SOLID Principles
- **Single Responsibility**: Cada função/classe deve ter uma única responsabilidade
- **Open/Closed**: Aberto para extensão, fechado para modificação
- **Liskov Substitution**: Subtipos devem ser substituíveis por seus tipos base
- **Interface Segregation**: Interfaces específicas são melhores que interfaces genéricas
- **Dependency Inversion**: Dependa de abstrações, não de implementações concretas

### DRY (Don't Repeat Yourself)
- Extraia código repetido em funções/componentes reutilizáveis
- Use constantes para valores que se repetem
- Crie utilitários para lógicas comuns

## Estrutura de Arquivos

### Nomenclatura Consistente
- **Arquivos**: kebab-case (ex: `user-profile.vue`)
- **Componentes**: PascalCase (ex: `UserProfile`)
- **Variáveis/Funções**: camelCase (ex: `fetchUserData`)
- **Constantes**: UPPER_SNAKE_CASE (ex: `MAX_RETRY_ATTEMPTS`)

## Tipagem TypeScript

### Tipos Explícitos
```typescript
interface User {
  id: string
  name: string
  email: string
  createdAt: Date
}

const createUser = (userData: Omit<User, 'id' | 'createdAt'>): Promise<User> => {
  return userService.create(userData)
}
```

### Evite `any`
- Use `unknown` quando o tipo for realmente desconhecido
- Implemente type guards para validação de tipos
- Use generics para flexibilidade mantendo tipagem

## Performance

### Lazy Loading
- Carregue componentes sob demanda
- Use dynamic imports para rotas
- Implemente code splitting estratégico

### Otimização de Re-renders
```typescript
const MemoizedComponent = defineComponent({
  name: 'MemoizedComponent',
  setup(props) {
    const expensiveComputation = computed(() => {
      return heavyCalculation(props.data)
    })
    
    return { expensiveComputation }
  }
})
```

## Tratamento de Erros

### Async/Await
```typescript
const fetchData = async (): Promise<ApiResult<Data>> => {
  try {
    const response = await apiCall()
    return { data: response.data, error: null }
  } catch (error) {
    logger('API Error:', error)
    return { data: null, error: 'DataLoadFailed' }
  }
}
```

### Error Boundaries
- Use ErrorBoundary components para capturar erros
- Implemente fallbacks informativos
- Log erros para monitoramento

### UI & Design
- Sempre crie componentes reutilizaveis
- Use a DaisyUI para construir todas interfaces
- Todo o sistema deve ter um vies de jogos/RPG
- 
