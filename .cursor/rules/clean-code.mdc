---
description: 
globs: 
alwaysApply: true
---
# Código Limpo

Esta regra define princípios e práticas para escrever código limpo, legível e manutenível.

## Princípios Fundamentais

### Clareza sobre Inteligência
- Escreva código que qualquer desenvolvedor possa entender
- Prefira soluções simples a soluções complexas
- Otimize para legibilidade, não para impressionar

### Nomes Significativos
```typescript
const MEMBERSHIP_PREMIUM = 'premium'
const BASE_PRICE_VALUE = 0

const calculateTotalPrice = (items: CartItem[]) => {
  return items.reduce((total, item) => total + item.price * item.quantity, BASE_PRICE_VALUE)
}

const isUserEligibleForDiscount = (user: User) => {
  return user.membershipLevel === MEMBERSHIP_PREMIUM && user.isActive
}
```

### Funções Pequenas
- Mantenha funções com no máximo 20 linhas
- Uma função deve fazer apenas uma coisa
- Use nomes descritivos que eliminam a necessidade de explicações

## Estrutura de Código

### Formatação Consistente
```typescript
const userService = {
  async create(userData: UserCreate): Promise<User> {
    const validatedData = validateUserData(userData)
    const hashedPassword = hashPassword(validatedData.password)
    
    return await useUserService().create({
      ...validatedData,
      password: hashedPassword,
      createdAt: new Date()
    })
  },

  async findById(id: string): Promise<User | null> {
    return await useUserService().findUnique({
      where: { id }
    })
  }
}
```

### Organização Lógica
- Agrupe código relacionado
- Separe conceitos diferentes com espaçamento
- Mantenha ordem consistente (imports, types, constants, functions)

## Evite Duplicação

### Extraia Lógica Comum
```typescript
const PASSWORD_MIN_LENGTH = 8

const validateEmail = (email: string): boolean => {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)
}

const validatePassword = (password: string): boolean => {
  return password.length >= PASSWORD_MIN_LENGTH 
    && /[A-Z]/.test(password) 
    && /[0-9]/.test(password)
}

const validateUserInput = (userData: UserInput) => {
  const errors: string[] = []
  
  if (!validateEmail(userData.email)) {
    errors.push('Email inválido')
  }
  
  if (!validatePassword(userData.password)) {
    errors.push('Senha deve ter ao menos 8 caracteres, 1 maiúscula e 1 número')
  }
  
  return {
    isValid: errors.length === 0,
    errors
  }
}
```

### Constantes Nomeadas
```typescript
const PASSWORD_MIN_LENGTH = 8
const EMAIL_REGEX = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
const SESSION_DURATION_HOURS = 24
const MAX_LOGIN_ATTEMPTS = 5

const validatePasswordStrength = (password: string) => {
  return password.length >= PASSWORD_MIN_LENGTH
}
```

## Tratamento de Erros

### Seja Específico
```typescript
const ERROR_USER_NOT_FOUND = 'UserNotFoundError'
const ERROR_INVALID_EMAIL = 'InvalidEmailError'

class UserNotFoundError extends Error {
  constructor(userId: string) {
    super(`Usuário com ID ${userId} não foi encontrado`)
    this.name = ERROR_USER_NOT_FOUND
  }
}

class InvalidEmailError extends Error {
  constructor(email: string) {
    super(`Email ${email} possui formato inválido`)
    this.name = ERROR_INVALID_EMAIL
  }
}

const getUserProfile = async (userId: string): Promise<UserProfile> => {
  if (!userId) {
    throw new Error('ID do usuário é obrigatório')
  }
  
  const user = await useUserService().findById(userId)
  
  if (!user) {
    throw new UserNotFoundError(userId)
  }
  
  return createUserProfile(user)
}
```

### Falhe Rápido
```typescript
const PAYMENT_MIN_AMOUNT = 0
const PAYMENT_CARD_MIN_LENGHT = 16

const processPayment = async (paymentData: PaymentData) => {
  const isPaymentInvalid = !paymentData.amount || paymentData.amount <= PAYMENT_MIN_AMOUNT
  if (isPaymentInvalid) {
    throw new Error('Valor do pagamento deve ser maior que zero')
  }
  
  const isCardInvalid = !paymentData.cardNumber || paymentData.cardNumber.length !== PAYMENT_CARD_MIN_LENGHT
  if (isCardInvalid) {
    throw new Error('Número do cartão deve ter 16 dígitos')
  }
  
  return await paymentService.process(paymentData)
}
```

## Composição sobre Herança

### Use Composables
```typescript
export const useValidation = () => {
  const validateRequired = (value: string, fieldName: string) => {
    if (!value?.trim()) {
      return `${fieldName} é obrigatório`
    }
    return null
  }
  
  const validateEmail = (email: string) => {
    if (!EMAIL_REGEX.test(email)) {
      return 'Email deve ter formato válido'
    }
    return null
  }
  
  return {
    validateRequired,
    validateEmail
  }
}

export const useUserForm = () => {
  const { validateRequired, validateEmail } = useValidation()
  
  const validateUserForm = (formData: UserFormData) => {
    const errors: Record<string, string> = {}
    
    const nameError = validateRequired(formData.name, 'Nome')
    if (nameError) errors.name = nameError
    
    const emailError = validateEmail(formData.email)
    if (emailError) errors.email = emailError
    
    return {
      isValid: Object.keys(errors).length === 0,
      errors
    }
  }
  
  return { validateUserForm }
}
```

## Responsabilidade Única

### Separe Preocupações
```typescript
const userTransformer = {
  toPublicProfile(user: User): PublicUserProfile {
    return {
      id: user.id,
      name: user.name,
      avatar: user.avatar,
      memberSince: user.createdAt
    }
  },
  
  toAdminView(user: User): AdminUserView {
    return {
      ...this.toPublicProfile(user),
      email: user.email,
      lastLogin: user.lastLoginAt,
      isActive: user.isActive
    }
  }
}

const userRepository = {
  async save(user: User): Promise<User> {
    return await useUserService().upsert({
      where: { id: user.id },
      create: user,
      update: user
    })
  },
  
  async findByEmail(email: string): Promise<User | null> {
    return await useUserService().findUnique({
      where: { email }
    })
  }
}
```

## Legibilidade do Código

### Use Estruturas Expressivas
```typescript
const ROLE_ADMIN = 'admin'
const ROLE_MODERATOR = 'moderator'

const getUserPermissions = (user: User): Permission[] => {
  const basePermissions = getBasePermissions()
  
  if (user.role === ROLE_ADMIN) {
    return [...basePermissions, ...getAdminPermissions()]
  }
  
  if (user.role === ROLE_MODERATOR) {
    return [...basePermissions, ...getModeratorPermissions()]
  }
  
  return basePermissions
}

const formatUserDisplayName = (user: User): string => {
  if (user.preferredName) {
    return user.preferredName
  }
  
  if (user.firstName && user.lastName) {
    return `${user.firstName} ${user.lastName}`
  }
  
  return user.email.split('@')[0]
}
```
